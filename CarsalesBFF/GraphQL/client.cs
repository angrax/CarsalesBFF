// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace RYMGraphQl
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static Type GetElementType(Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, Type targetType, Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(Type targetContainerType, Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string BuildArgumentValue(object value, string formatMask, Formatting formatting, int level, byte indentationSize)
        {
            if (value is null)
                return "null";
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null: return "null";
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        return BuildArgumentValue(jValue.Value, null, formatting, level, indentationSize);
                    case JTokenType.String:
                        return "\"" + ((string)jValue.Value).Replace("\"", "\\\"") + "\"";
                    default:
                        return "\"" + jValue.Value + "\"";
                }
            }
    
            if (value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, formatting, level, indentationSize)}";
            }
    
            if (value is JObject jObject)
                return BuildEnumerableArgument(jObject, null, formatting, level + 1, indentationSize, '{', '}');
    #endif
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return "\"" + dateTime.ToString("O") + "\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return "\"" + dateTimeOffset.ToString("O") + "\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, formatting, level + 2, indentationSize);
    
            if (value is Guid)
                return "\"" + value + "\"";
    
            if (value is String @string)
                return "\"" + @string.Replace("\"", "\\\"") + "\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, formatting, level, indentationSize, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return "\"" + argumentValue + "\"";
        }
    
        private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, indentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, formatting, level, indentationSize));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? "$" + queryBuilderParameter.Name
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, formatting, level, indentationSize);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, indentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, Formatting formatting, int level, byte indentationSize)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, formatting, level, indentationSize));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
                if (enumMember == null)
                    throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
        }
    
        public GraphQlQueryParameter(string name, T value, bool isNullable = true) : base(name, GetGraphQlTypeName(value, isNullable), value)
        {
        }
    
        private static string GetGraphQlTypeName(T value, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(typeof(T));
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(string))
                return "String";
    
            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }
    
        private static string GetValueTypeGraphQlTypeName(Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(formatting, 1, indentationSize);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields);
        }
    
        protected virtual string Build(Formatting formatting, int level, byte indentationSize)
        {
            var isIndentedFormatting = formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            if (!String.IsNullOrEmpty(_operationType))
            {
                builder.Append(_operationType);
    
                if (!String.IsNullOrEmpty(_operationName))
                {
                    builder.Append(" ");
                    builder.Append(_operationName);
                }
    
                if (_queryParameters?.Count > 0)
                {
                    builder.Append(indentationSpace);
                    builder.Append("(");
    
                    foreach (var queryParameterInfo in _queryParameters)
                    {
                        if (isIndentedFormatting)
                        {
                            builder.AppendLine(separator);
                            builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));
                        }
                        else
                            builder.Append(separator);
                        
                        builder.Append("$");
                        builder.Append(queryParameterInfo.ArgumentValue.Name);
                        builder.Append(":");
                        builder.Append(indentationSpace);
    
                        builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                        if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!"))
                        {
                            builder.Append(indentationSpace);
                            builder.Append("=");
                            builder.Append(indentationSpace);
                            builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, formatting, 0, indentationSize));
                        }
    
                        separator = ",";
                    }
    
                    builder.Append(")");
                }
            }
    
            builder.Append(indentationSpace);
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
            
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(formatting, level, indentationSize);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));
            
            builder.Append("}");
    
            return builder.ToString();
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }
    
        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();
    
                    if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;
    
                    parentTypes?.Add(builderType);
    
                    var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });
    
                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
            
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(Formatting formatting, int level, byte indentationSize);
    
            protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
            {
                var separator = formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, formatting, level, indentationSize) : "$" + a.ArgumentValue.Name)}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(Formatting formatting, int level, byte indentationSize) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, formatting, level, indentationSize)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                GetIndentation(formatting, level, indentationSize) +
                BuildAliasPrefix(Alias, formatting) +
                FieldName +
                BuildArgumentClause(formatting, level, indentationSize) +
                BuildDirectiveClause(formatting, level, indentationSize);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(Alias, formatting) + FieldName +
                      BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(formatting, level, indentationSize) + "..." + (formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize);
        }
    }
    
    public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }
    
    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }
    
    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string String = "String";
        public const string Upload = "Upload";

        public const string CacheControlScope = "CacheControlScope";

        public const string Character = "Character";
        public const string Characters = "Characters";
        public const string Episode = "Episode";
        public const string Episodes = "Episodes";
        public const string Info = "Info";
        public const string Location = "Location";
        public const string Locations = "Locations";
        public const string Query = "Query";

        public const string FilterCharacter = "FilterCharacter";
        public const string FilterEpisode = "FilterEpisode";
        public const string FilterLocation = "FilterLocation";

        public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
            new Dictionary<Type, string>
            {
                { typeof(Guid), "ID" },
                { typeof(string), "String" },
                { typeof(int), "Int" },
                { typeof(FilterCharacter), "FilterCharacter" },
                { typeof(FilterEpisode), "FilterEpisode" },
                { typeof(FilterLocation), "FilterLocation" }
            };
}
    #endregion

    #region enums
    public enum CacheControlScope
    {
        [EnumMember(Value = "PUBLIC")] Public,
        [EnumMember(Value = "PRIVATE")] Private
    }
    #endregion

    #region directives
    public class CacheControlDirective : GraphQlDirective
    {
        public CacheControlDirective(QueryBuilderParameter<int?> maxAge = null, QueryBuilderParameter<CacheControlScope?> scope = null) : base("cacheControl")
        {
            AddArgument("maxAge", maxAge);
            AddArgument("scope", scope);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }

    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "character", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "characters", IsComplex = true, QueryBuilderType = typeof(CharactersQueryBuilder) },
                new GraphQlFieldMetadata { Name = "charactersByIds", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "location", IsComplex = true, QueryBuilderType = typeof(LocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "locations", IsComplex = true, QueryBuilderType = typeof(LocationsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "locationsByIds", IsComplex = true, QueryBuilderType = typeof(LocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "episode", IsComplex = true, QueryBuilderType = typeof(EpisodeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "episodes", IsComplex = true, QueryBuilderType = typeof(EpisodesQueryBuilder) },
                new GraphQlFieldMetadata { Name = "episodesByIds", IsComplex = true, QueryBuilderType = typeof(EpisodeQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithCharacter(CharacterQueryBuilder characterQueryBuilder, QueryBuilderParameter<Guid> id, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("character", alias, characterQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptCharacter()
        {
            return ExceptField("character");
        }

        public QueryQueryBuilder WithCharacters(CharactersQueryBuilder charactersQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<FilterCharacter> filter = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("characters", alias, charactersQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptCharacters()
        {
            return ExceptField("characters");
        }

        public QueryQueryBuilder WithCharactersByIds(CharacterQueryBuilder characterQueryBuilder, QueryBuilderParameter<IEnumerable<Guid>> ids, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "ids", ArgumentValue = ids} );
            return WithObjectField("charactersByIds", alias, characterQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptCharactersByIds()
        {
            return ExceptField("charactersByIds");
        }

        public QueryQueryBuilder WithLocation(LocationQueryBuilder locationQueryBuilder, QueryBuilderParameter<Guid> id, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("location", alias, locationQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptLocation()
        {
            return ExceptField("location");
        }

        public QueryQueryBuilder WithLocations(LocationsQueryBuilder locationsQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<FilterLocation> filter = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("locations", alias, locationsQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptLocations()
        {
            return ExceptField("locations");
        }

        public QueryQueryBuilder WithLocationsByIds(LocationQueryBuilder locationQueryBuilder, QueryBuilderParameter<IEnumerable<Guid>> ids, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "ids", ArgumentValue = ids} );
            return WithObjectField("locationsByIds", alias, locationQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptLocationsByIds()
        {
            return ExceptField("locationsByIds");
        }

        public QueryQueryBuilder WithEpisode(EpisodeQueryBuilder episodeQueryBuilder, QueryBuilderParameter<Guid> id, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("episode", alias, episodeQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptEpisode()
        {
            return ExceptField("episode");
        }

        public QueryQueryBuilder WithEpisodes(EpisodesQueryBuilder episodesQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<FilterEpisode> filter = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("episodes", alias, episodesQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptEpisodes()
        {
            return ExceptField("episodes");
        }

        public QueryQueryBuilder WithEpisodesByIds(EpisodeQueryBuilder episodeQueryBuilder, QueryBuilderParameter<IEnumerable<Guid>> ids, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "ids", ArgumentValue = ids} );
            return WithObjectField("episodesByIds", alias, episodeQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptEpisodesByIds()
        {
            return ExceptField("episodesByIds");
        }
    }

    public class CharacterQueryBuilder : GraphQlQueryBuilder<CharacterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "status" },
                new GraphQlFieldMetadata { Name = "species" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "gender" },
                new GraphQlFieldMetadata { Name = "origin", IsComplex = true, QueryBuilderType = typeof(LocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "location", IsComplex = true, QueryBuilderType = typeof(LocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "image" },
                new GraphQlFieldMetadata { Name = "episode", IsComplex = true, QueryBuilderType = typeof(EpisodeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "created" }
            };

        protected override string TypeName { get { return "Character"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CharacterQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CharacterQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CharacterQueryBuilder WithStatus(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public CharacterQueryBuilder WithSpecies(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("species", alias, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptSpecies()
        {
            return ExceptField("species");
        }

        public CharacterQueryBuilder WithType(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public CharacterQueryBuilder WithGender(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("gender", alias, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptGender()
        {
            return ExceptField("gender");
        }

        public CharacterQueryBuilder WithOrigin(LocationQueryBuilder locationQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("origin", alias, locationQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptOrigin()
        {
            return ExceptField("origin");
        }

        public CharacterQueryBuilder WithLocation(LocationQueryBuilder locationQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("location", alias, locationQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptLocation()
        {
            return ExceptField("location");
        }

        public CharacterQueryBuilder WithImage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("image", alias, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptImage()
        {
            return ExceptField("image");
        }

        public CharacterQueryBuilder WithEpisode(EpisodeQueryBuilder episodeQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("episode", alias, episodeQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptEpisode()
        {
            return ExceptField("episode");
        }

        public CharacterQueryBuilder WithCreated(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { skip, include });
        }

        public CharacterQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }
    }

    public class LocationQueryBuilder : GraphQlQueryBuilder<LocationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "dimension" },
                new GraphQlFieldMetadata { Name = "residents", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "created" }
            };

        protected override string TypeName { get { return "Location"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LocationQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public LocationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LocationQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
        }

        public LocationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LocationQueryBuilder WithType(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { skip, include });
        }

        public LocationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public LocationQueryBuilder WithDimension(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("dimension", alias, new GraphQlDirective[] { skip, include });
        }

        public LocationQueryBuilder ExceptDimension()
        {
            return ExceptField("dimension");
        }

        public LocationQueryBuilder WithResidents(CharacterQueryBuilder characterQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("residents", alias, characterQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public LocationQueryBuilder ExceptResidents()
        {
            return ExceptField("residents");
        }

        public LocationQueryBuilder WithCreated(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { skip, include });
        }

        public LocationQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }
    }

    public class EpisodeQueryBuilder : GraphQlQueryBuilder<EpisodeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "air_date" },
                new GraphQlFieldMetadata { Name = "episode" },
                new GraphQlFieldMetadata { Name = "characters", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "created" }
            };

        protected override string TypeName { get { return "Episode"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EpisodeQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public EpisodeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public EpisodeQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
        }

        public EpisodeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public EpisodeQueryBuilder WithAirDate(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("air_date", alias, new GraphQlDirective[] { skip, include });
        }

        public EpisodeQueryBuilder ExceptAirDate()
        {
            return ExceptField("air_date");
        }

        public EpisodeQueryBuilder WithEpisode(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("episode", alias, new GraphQlDirective[] { skip, include });
        }

        public EpisodeQueryBuilder ExceptEpisode()
        {
            return ExceptField("episode");
        }

        public EpisodeQueryBuilder WithCharacters(CharacterQueryBuilder characterQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("characters", alias, characterQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EpisodeQueryBuilder ExceptCharacters()
        {
            return ExceptField("characters");
        }

        public EpisodeQueryBuilder WithCreated(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { skip, include });
        }

        public EpisodeQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }
    }

    public class CharactersQueryBuilder : GraphQlQueryBuilder<CharactersQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "info", IsComplex = true, QueryBuilderType = typeof(InfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "results", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) }
            };

        protected override string TypeName { get { return "Characters"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CharactersQueryBuilder WithInfo(InfoQueryBuilder infoQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("info", alias, infoQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public CharactersQueryBuilder ExceptInfo()
        {
            return ExceptField("info");
        }

        public CharactersQueryBuilder WithResults(CharacterQueryBuilder characterQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("results", alias, characterQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public CharactersQueryBuilder ExceptResults()
        {
            return ExceptField("results");
        }
    }

    public class InfoQueryBuilder : GraphQlQueryBuilder<InfoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "count" },
                new GraphQlFieldMetadata { Name = "pages" },
                new GraphQlFieldMetadata { Name = "next" },
                new GraphQlFieldMetadata { Name = "prev" }
            };

        protected override string TypeName { get { return "Info"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public InfoQueryBuilder WithCount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { skip, include });
        }

        public InfoQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public InfoQueryBuilder WithPages(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("pages", alias, new GraphQlDirective[] { skip, include });
        }

        public InfoQueryBuilder ExceptPages()
        {
            return ExceptField("pages");
        }

        public InfoQueryBuilder WithNext(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("next", alias, new GraphQlDirective[] { skip, include });
        }

        public InfoQueryBuilder ExceptNext()
        {
            return ExceptField("next");
        }

        public InfoQueryBuilder WithPrev(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("prev", alias, new GraphQlDirective[] { skip, include });
        }

        public InfoQueryBuilder ExceptPrev()
        {
            return ExceptField("prev");
        }
    }

    public class LocationsQueryBuilder : GraphQlQueryBuilder<LocationsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "info", IsComplex = true, QueryBuilderType = typeof(InfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "results", IsComplex = true, QueryBuilderType = typeof(LocationQueryBuilder) }
            };

        protected override string TypeName { get { return "Locations"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LocationsQueryBuilder WithInfo(InfoQueryBuilder infoQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("info", alias, infoQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public LocationsQueryBuilder ExceptInfo()
        {
            return ExceptField("info");
        }

        public LocationsQueryBuilder WithResults(LocationQueryBuilder locationQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("results", alias, locationQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public LocationsQueryBuilder ExceptResults()
        {
            return ExceptField("results");
        }
    }

    public class EpisodesQueryBuilder : GraphQlQueryBuilder<EpisodesQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "info", IsComplex = true, QueryBuilderType = typeof(InfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "results", IsComplex = true, QueryBuilderType = typeof(EpisodeQueryBuilder) }
            };

        protected override string TypeName { get { return "Episodes"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EpisodesQueryBuilder WithInfo(InfoQueryBuilder infoQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("info", alias, infoQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EpisodesQueryBuilder ExceptInfo()
        {
            return ExceptField("info");
        }

        public EpisodesQueryBuilder WithResults(EpisodeQueryBuilder episodeQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("results", alias, episodeQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EpisodesQueryBuilder ExceptResults()
        {
            return ExceptField("results");
        }
    }
    #endregion

    #region input classes
    public class FilterCharacter : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _status;
        private InputPropertyInfo _species;
        private InputPropertyInfo _type;
        private InputPropertyInfo _gender;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Status
        {
            get { return (QueryBuilderParameter<string>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Species
        {
            get { return (QueryBuilderParameter<string>)_species.Value; }
            set { _species = new InputPropertyInfo { Name = "species", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Type
        {
            get { return (QueryBuilderParameter<string>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Gender
        {
            get { return (QueryBuilderParameter<string>)_gender.Value; }
            set { _gender = new InputPropertyInfo { Name = "gender", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_status.Name != null) yield return _status;
            if (_species.Name != null) yield return _species;
            if (_type.Name != null) yield return _type;
            if (_gender.Name != null) yield return _gender;
        }
    }

    public class FilterLocation : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _type;
        private InputPropertyInfo _dimension;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Type
        {
            get { return (QueryBuilderParameter<string>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Dimension
        {
            get { return (QueryBuilderParameter<string>)_dimension.Value; }
            set { _dimension = new InputPropertyInfo { Name = "dimension", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_type.Name != null) yield return _type;
            if (_dimension.Name != null) yield return _dimension;
        }
    }

    public class FilterEpisode : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _episode;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Episode
        {
            get { return (QueryBuilderParameter<string>)_episode.Value; }
            set { _episode = new InputPropertyInfo { Name = "episode", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_episode.Name != null) yield return _episode;
        }
    }
    #endregion

    #region data classes
    public class Query
    {
        public Character Character { get; set; }
        public Characters Characters { get; set; }
        public ICollection<Character> CharactersByIds { get; set; }
        public Location Location { get; set; }
        public Locations Locations { get; set; }
        public ICollection<Location> LocationsByIds { get; set; }
        public EpisodeData Episode { get; set; }
        public Episodes Episodes { get; set; }
        public ICollection<EpisodeData> EpisodesByIds { get; set; }
    }

    public class Character
    {
        public Guid? Id { get; set; }
        public string Name { get; set; }
        public string Status { get; set; }
        public string Species { get; set; }
        public string Type { get; set; }
        public string Gender { get; set; }
        public Location Origin { get; set; }
        public Location Location { get; set; }
        public string Image { get; set; }
        public ICollection<EpisodeData> Episode { get; set; }
        public string Created { get; set; }
    }

    public class Location
    {
        public Guid? Id { get; set; }
        public string Name { get; set; }
        public string Type { get; set; }
        public string Dimension { get; set; }
        public ICollection<Character> Residents { get; set; }
        public string Created { get; set; }
    }

    public class EpisodeData
    {
        public Guid? Id { get; set; }
        public string Name { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("air_date")]
        #endif
        public string AirDate { get; set; }
        public string Episode { get; set; }
        public ICollection<Character> Characters { get; set; }
        public string Created { get; set; }
    }

    public class Characters
    {
        public Info Info { get; set; }
        public ICollection<Character> Results { get; set; }
    }

    public class Info
    {
        public int? Count { get; set; }
        public int? Pages { get; set; }
        public int? Next { get; set; }
        public int? Prev { get; set; }
    }

    public class Locations
    {
        public Info Info { get; set; }
        public ICollection<Location> Results { get; set; }
    }

    public class Episodes
    {
        public Info Info { get; set; }
        public ICollection<EpisodeData> Results { get; set; }
    }
    #endregion
}
